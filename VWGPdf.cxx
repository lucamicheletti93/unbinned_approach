/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "VWGPdf.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

ClassImp(VWGPdf)

 VWGPdf::VWGPdf(const char *name, const char *title,
                        RooAbsReal& _x,
                        RooAbsReal& _N,
                        RooAbsReal& _mean,
                        RooAbsReal& _alpha,
                        RooAbsReal& _beta) :
   RooAbsPdf(name,title),
   x("x","x",this,_x),
   N("N","N",this,_N),
   mean("mean","mean",this,_mean),
   alpha("alpha","alpha",this,_alpha),
   beta("beta","beta",this,_beta)
 {
 }


 VWGPdf::VWGPdf(const VWGPdf& other, const char* name) :
   RooAbsPdf(other,name),
   x("x",this,other.x),
   N("N",this,other.N),
   mean("mean",this,other.mean),
   alpha("alpha",this,other.alpha),
   beta("beta",this,other.beta)
 {
 }



 Double_t VWGPdf::evaluate() const
 {
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
   //return A*fabs(x)+pow(x-B,2) ;

   Double_t sigma = alpha + beta*((x - mean)/mean);
   Double_t FitBck = N*exp(-(x - mean)*(x - mean)/(2.*sigma*sigma));
   return FitBck;
 }



//Int_t VWGPdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
 //{
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs
   // EXPRESSION MULTIPLE TIMES

   //if (matchArgs(allVars,analVars,x)) return 1 ;
   //return 0 ;
 //}



 /*Double_t VWGPdf::analyticalIntegral(Int_t code, const char* rangeName) const
 {
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   if (code==1) { return ((A/2)*(pow(x.max(rangeName),2)+pow(x.min(rangeName),2))+(1./3)*(pow(x.max(rangeName)-B,3)-pow(x.min(rangeName)-B,3))) ; }
   return 0 ;
 }*/
