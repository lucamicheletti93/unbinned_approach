/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "CB2Pdf.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

ClassImp(CB2Pdf)

 CB2Pdf::CB2Pdf(const char *name, const char *title,
                        RooAbsReal& _x,
                        RooAbsReal& _N,
                        RooAbsReal& _mean,
                        RooAbsReal& _sigma,
                        RooAbsReal& _alpha1,
                        RooAbsReal& _A1,
                        RooAbsReal& _alpha2,
                        RooAbsReal& _A2) :
   RooAbsPdf(name,title),
   x("x","x",this,_x),
   N("N","N",this,_N),
   mean("mean","mean",this,_mean),
   sigma("sigma","sigma",this,_sigma),
   alpha1("alpha1","alpha1",this,_alpha1),
   A1("A1","A1",this,_A1),
   alpha2("alpha2","alpha2",this,_alpha2),
   A2("A2","A2",this,_A2)
 {
 }


 CB2Pdf::CB2Pdf(const CB2Pdf& other, const char* name) :
   RooAbsPdf(other,name),
   x("x",this,other.x),
   N("N",this,other.N),
   mean("mean",this,other.mean),
   sigma("sigma",this,other.sigma),
   alpha1("alpha1",this,other.alpha1),
   A1("A1",this,other.A1),
   alpha2("alpha2",this,other.alpha2),
   A2("A2",this,other.A2)
 {
 }



 Double_t CB2Pdf::evaluate() const
 {
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
   Double_t t = (x - mean)/sigma;
   if (alpha1 < 0) t = -t;

   Double_t absAlpha1 = fabs((Double_t)alpha1);
   Double_t absAlpha2 = fabs((Double_t)alpha2);

   if (t >= -absAlpha1 && t < absAlpha2) // gaussian core

   {
     return N*(exp(-0.5*t*t));
   }

   if (t < -absAlpha1) //left tail

   {
     Double_t a =  TMath::Power(A1/absAlpha1,A1)*exp(-0.5*absAlpha1*absAlpha1);
     Double_t b = A1/absAlpha1 - absAlpha1;

     return N*(a/TMath::Power(b - t, A1));
   }

   if (t >= absAlpha2) //right tail

   {

    Double_t c =  TMath::Power(A2/absAlpha2,A2)*exp(-0.5*absAlpha2*absAlpha2);
    Double_t d = A2/absAlpha2 - absAlpha2;

   return  N*(c/TMath::Power(d + t, A2));
   }

   return 0.;
 }



//Int_t CB2Pdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
 //{
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs
   // EXPRESSION MULTIPLE TIMES

   //if (matchArgs(allVars,analVars,x)) return 1 ;
   //return 0 ;
 //}



 /*Double_t CB2Pdf::analyticalIntegral(Int_t code, const char* rangeName) const
 {
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   if (code==1) { return ((A/2)*(pow(x.max(rangeName),2)+pow(x.min(rangeName),2))+(1./3)*(pow(x.max(rangeName)-B,3)-pow(x.min(rangeName)-B,3))) ; }
   return 0 ;
 }*/
