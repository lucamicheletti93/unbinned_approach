/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

#ifndef VWGPDF
#define VWGPDF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"

class PolarizationPdf : public RooAbsPdf {
public:
  PolarizationPdf() {} ;
  PolarizationPdf(const char *name, const char *title,
	      RooAbsReal& _CosTheta,
        RooAbsReal& _Phi,
        RooAbsReal& _N,
        RooAbsReal& _lambdaTheta,
	      RooAbsReal& _lambdaPhi,
	      RooAbsReal& _lambdaThetaPhi);
  PolarizationPdf(const PolarizationPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new PolarizationPdf(*this,newname); }
  inline virtual ~PolarizationPdf() { }

  //Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  //Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

protected:

  RooRealProxy CosTheta ;
  RooRealProxy Phi ;
  RooRealProxy N ;
  RooRealProxy lambdaTheta ;
  RooRealProxy lambdaPhi ;
  RooRealProxy lambdaThetaPhi ;

  Double_t evaluate() const ;

private:

  ClassDef(PolarizationPdf,1) // Your description goes here...
};

#endif
