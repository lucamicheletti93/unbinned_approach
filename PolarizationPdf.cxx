/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "PolarizationPdf.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

ClassImp(PolarizationPdf)

 PolarizationPdf::PolarizationPdf(const char *name, const char *title,
                        RooAbsReal& _CosTheta,
                        RooAbsReal& _Phi,
                        RooAbsReal& _N,
                        RooAbsReal& _lambdaTheta,
                        RooAbsReal& _lambdaPhi,
                        RooAbsReal& _lambdaThetaPhi) :
   RooAbsPdf(name,title),
   CosTheta("CosTheta","CosTheta",this,_CosTheta),
   Phi("Phi","Phi",this,_Phi),
   N("N","N",this,_N),
   lambdaTheta("lambdaTheta","lambdaTheta",this,_lambdaTheta),
   lambdaPhi("lambdaPhi","lambdaPhi",this,_lambdaPhi),
   lambdaThetaPhi("lambdaThetaPhi","lambdaThetaPhi",this,_lambdaThetaPhi)
 {
 }


 PolarizationPdf::PolarizationPdf(const PolarizationPdf& other, const char* name) :
   RooAbsPdf(other,name),
   CosTheta("CosTheta",this,other.CosTheta),
   Phi("Phi",this,other.Phi),
   N("N",this,other.N),
   lambdaTheta("lambdaTheta",this,other.lambdaTheta),
   lambdaPhi("lambdaPhi",this,other.lambdaPhi),
   lambdaThetaPhi("lambdaThetaPhi",this,other.lambdaThetaPhi)
 {
 }



 Double_t PolarizationPdf::evaluate() const
 {
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
   double cosph = TMath::Cos(Phi);
   double cos2ph = TMath::Cos(2*Phi);

   double W =  (N/(3 + lambdaTheta))*(1 + (lambdaTheta + lambdaPhi*cos2ph)*CosTheta*CosTheta + 2*lambdaThetaPhi*CosTheta*cosph*TMath::Sqrt(1 - CosTheta*CosTheta) + lambdaPhi*cos2ph);
   return W;
 }



//Int_t PolarizationPdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
 //{
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs
   // EXPRESSION MULTIPLE TIMES

   //if (matchArgs(allVars,analVars,x)) return 1 ;
   //return 0 ;
 //}



 /*Double_t PolarizationPdf::analyticalIntegral(Int_t code, const char* rangeName) const
 {
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x

   if (code==1) { return ((A/2)*(pow(x.max(rangeName),2)+pow(x.min(rangeName),2))+(1./3)*(pow(x.max(rangeName)-B,3)-pow(x.min(rangeName)-B,3))) ; }
   return 0 ;
 }*/
